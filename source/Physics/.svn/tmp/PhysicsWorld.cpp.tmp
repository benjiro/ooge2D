#include <PhysicsWorld.hpp>

using namespace ooge;

template<> PhysicsWorld *Singleton<PhysicsWorld>::ms_Singleton = 0;

PhysicsWorld::PhysicsWorld(const Vector2 &gravity, bool sleep, bool debugDraw)
{
	mb2World = new b2World(b2Vec2(gravity.X, gravity.Y), sleep);

	if(debugDraw)
	{
		mDebugDraw = new PhysicsDebugDraw();
		DebugDrawing();
	}
}

PhysicsWorld::~PhysicsWorld()
{
	if(mb2World)
		delete mb2World;
}

void PhysicsWorld::AddActor(/*const Actor *actor*/)
{
}

void PhysicsWorld::RemoveActor(/*const Actor *actor*/)
{
}

void PhysicsWorld::SetDestructionListener(ActorDestructionListener *listener)
{
	mb2World->SetDestructionListener(listener);
}

void PhysicsWorld::SetContactFilter(ContactFilter *listener)
{
	mb2World->SetContactFilter(listener);
}

void PhysicsWorld::SetContactListener(ContactListener *listener)
{
	mb2World->SetContactListener(listener);
}

void PhysicsWorld::DebugDrawing()
{
	mb2World->SetDebugDraw(mDebugDraw);
}

void PhysicsWorld::UpdateWorld(Real timeStep)
{
	mb2World->Step(timeStep, 10,10);
}

b2World *PhysicsWorld::GetBox2DWorld() const
{
	return mb2World;
}

PhysicsWorld &PhysicsWorld::GetSingleton()
{
	assert(ms_Singleton);
	return (*ms_Singleton);
}

PhysicsWorld *PhysicsWorld::GetSingletonPtr()
{
	return ms_Singleton;
}